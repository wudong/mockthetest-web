/// <reference path="../__all.d.ts" />
import model = require('app/model');
declare module service {
    class QuestionInfo {
        constructor(q: model.QuestionVM);
        public question: model.QuestionVM;
        public mark: model.Mark;
    }
    class SEOInfoObject {
        private title;
        private keywords;
        private description;
        public default_title: string;
        public default_keywords: string[];
        public default_description: string;
        private get(prop);
        private set(prop, value);
        public getTitle(): string;
        public getDescription(): any;
        public getKeywords(): string;
        public setKeywords(kws: string[]): void;
        public setTitle(title: string): void;
        public setDescription(de: string): void;
        public reset(): void;
    }
    class TestService {
        private loginUser;
        private rootScope;
        private questionRest;
        private markRest;
        private userRest;
        private logger;
        private interval;
        private rest;
        private q;
        private window;
        private storage;
        private modal;
        private buffer_for_browse_id;
        public mainControl: any;
        public sessionInfo: model.SessionInfo;
        public userInfo: model.UserProgress;
        private seoObject;
        private question_infos;
        static $inject: string[];
        constructor($rootScope: ng.IScope, rest: restangular.IService, $log: ng.ILogService, $interval: ng.IIntervalService, q: ng.IQService, $window: ng.IWindowService, $modal: ng.ui.bootstrap.IModalService);
        public getSEOObject(): SEOInfoObject;
        public setSEOInfo(title: string, keyword: string[], desc?: string): void;
        public initializeService(): void;
        private checkSessionTime();
        public showUserPromotion(): void;
        private getSessionTime();
        public setPrerenderDone(): void;
        private initSession();
        public getRecentSearch(): string[];
        public addToRecentSearch(st: string): void;
        public addToReview(q: model.QuestionVM): void;
        public removeFromReview(q: model.QuestionVM): void;
        public displayMessage(message: string, type?: string, autoDismissTime?: number): void;
        public initMarks(): void;
        private updateQuestionInfoWithMark(m);
        private initUser();
        private fetchMarkForUser();
        public initAllQuestions(): ng.IPromise<void>;
        private saveQuestionToLocalStorage();
        private updateQuestionInfoWithQuestion(q);
        public resetQuestionFromServer(): void;
        public retrieveQuestions(last_update: boolean, callback?: (number: any) => void, numberOfQuestions?: number, skip?: number): ng.IPromise<void>;
        public getAllQuestionVMs(sort?: boolean): model.QuestionVM[];
        private getAllQuestion();
        public isLogin(): boolean;
        public login_user(user: model.User, loadMark?: boolean): void;
        public logout_user(): void;
        public transformQuestion(q: model.QuestionVM): void;
        public getQuestionsForReview(): model.QuestionVM[];
        public getQuestionByTag(tag: string): model.QuestionVM[];
        public searchQuestions(text: string): model.QuestionVM[];
        private filterQuestionVM(predict?);
        private filterMark(predict?);
        public getSessionAllMarks(): model.Mark[];
        public getQuestionsToBrowseByType(type: string): model.QuestionVM[];
        private retrieveQuestionsByMarks(markFilter);
        public findQuestionById(id: string): model.QuestionVM[];
        public findQuestionByIds(ids: string[]): model.QuestionVM[];
        public getLoginUser(): model.User;
        private calculateScoreForQuestion(q);
        private random();
        public sendingMark(callback?: (number: any) => void): void;
        public markQuestion(q: model.QuestionVM, right: boolean): void;
        public flagQuestion(q: model.QuestionVM, flag: boolean): void;
        public reportQuestion(q: model.QuestionVM, type: model.ReportType, callback?: (boolean: any, string?: any) => void): void;
        public tagQuestion(tag: string, q: model.QuestionVM, callback?: (b: boolean, s: string) => void): void;
        public saveQuestion(q: model.QuestionVM, callback: (boolean: any, string?: any) => void): void;
        public createQuestion(q: model.Question, callback: (boolean: any, string?: any) => void): void;
        public deleteQuestion(q: model.QuestionVM, callback: (boolean: any, string?: any) => void): void;
        public signUp(email: string, password: string, callback?: (boolean: any) => void): void;
        public login(email: string, password: string, callback?: (any: any) => void): void;
        public checkUsername(username: string, callback?: (boolean: any) => void): void;
        public saveSessionMarks(): void;
        public restoreSessionMarks(): void;
        public updateSessionInfo(): model.SessionInfo;
        public retrieveSessionInfo(): model.SessionInfo;
        public getBrowseBufferedQuestions(): model.QuestionVM[];
        public setBrowseBufferedQuestions(ids: string[]): void;
        public retrieveUserProgress(): model.UserProgress;
        public updateUserInfo(): model.UserProgress;
    }
}
export = service;
